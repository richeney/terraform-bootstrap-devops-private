data "azuredevops_project" "project" {
  name = var.azure_devops_project_name
}

data "azuredevops_git_repository" "repo" {
  project_id = data.azuredevops_project.project.id
  name       = var.azure_devops_project_name
}

locals {
  org_service_url = "https://dev.azure.com/${var.azure_devops_organization_name}"

  environment_name = "prod"

  pipeline_templates = toset(var.azure_devops_create_pipeline ? fileset("${path.module}/pipelines", "terraform*.yamltpl") : [])
  pipelines          = toset([for template in local.pipeline_templates : trimsuffix(template, "tpl")])
  pipeline_template_vars = {
    variable_group_name      = var.azure_devops_variable_group_name
    agent_pool_configuration = "vmImage: 'ubuntu-latest'"
    service_connection_name  = var.azure_devops_service_connection_name
    environment_name         = "prod"
  }

  file_templates = toset(var.azure_devops_create_files ? fileset("${path.module}/files", "*.tftpl") : [])
  files          = toset([for template in local.file_templates : trimsuffix(template, "tpl")])
  file_template_vars = {
    subscription_id = var.subscription_id
  }

}

resource "azuredevops_variable_group" "terraform" {
  project_id   = data.azuredevops_project.project.id
  name         = var.azure_devops_variable_group_name
  description  = "Variables for the Terraform backend"
  allow_access = true

  variable {
    name  = "BACKEND_AZURE_RESOURCE_GROUP_NAME"
    value = azurerm_resource_group.terraform.name
  }

  variable {
    name  = "BACKEND_AZURE_STORAGE_ACCOUNT_NAME"
    value = azurerm_storage_account.terraform.name
  }

  variable {
    name  = "BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME"
    value = azurerm_storage_container.terraform.name
  }
}

resource "azuredevops_serviceendpoint_azurerm" "terraform" {
  project_id                             = data.azuredevops_project.project.id
  service_endpoint_name                  = var.azure_devops_service_connection_name
  description                            = "Generated by Terraform"
  service_endpoint_authentication_scheme = "WorkloadIdentityFederation"

  credentials {
    serviceprincipalid = azurerm_user_assigned_identity.terraform.client_id
  }

  azurerm_spn_tenantid      = data.azurerm_subscription.terraform.tenant_id
  azurerm_subscription_id   = var.subscription_id
  azurerm_subscription_name = data.azurerm_subscription.terraform.display_name
}

resource "azurerm_federated_identity_credential" "terraform" {
  name                = substr(replace("${var.azure_devops_organization_name}--${var.azure_devops_project_name}--${var.azure_devops_service_connection_name}", " ", ""), 0, 120)
  depends_on          = [azuredevops_serviceendpoint_azurerm.terraform]
  resource_group_name = azurerm_resource_group.terraform.name
  parent_id           = azurerm_user_assigned_identity.terraform.id
  audience            = ["api://AzureADTokenExchange"]
  subject             = azuredevops_serviceendpoint_azurerm.terraform.workload_identity_federation_subject
  issuer              = azuredevops_serviceendpoint_azurerm.terraform.workload_identity_federation_issuer
}

// Optional pipeline files in the repository

resource "azuredevops_environment" "terraform" {
  for_each   = toset(var.azure_devops_create_pipeline ? [local.environment_name] : [])
  name       = each.key
  project_id = data.azuredevops_project.project.id
}

resource "azuredevops_git_repository_file" "pipeline" {
  for_each = local.pipeline_templates

  repository_id       = data.azuredevops_git_repository.repo.id
  file                = "pipelines/${trimsuffix(each.key, "tpl")}"
  branch              = "refs/heads/main"
  commit_message      = "Initial commit"
  overwrite_on_create = true

  content = templatefile("${path.module}/pipelines/${each.key}", local.pipeline_template_vars)
}

resource "azuredevops_build_definition" "terraform" {
  for_each   = local.pipelines
  project_id = data.azuredevops_project.project.id
  name       = each.key

  ci_trigger {
    use_yaml = true
  }

  repository {
    repo_type   = "TfsGit"
    repo_id     = data.azuredevops_git_repository.repo.id
    branch_name = "refs/heads/main"
    yml_path    = "pipelines/${each.key}"
  }
}

resource "azuredevops_pipeline_authorization" "environment" {
  for_each = local.pipelines

  project_id  = data.azuredevops_project.project.id
  pipeline_id = azuredevops_build_definition.terraform[each.key].id
  resource_id = azuredevops_environment.terraform[local.environment_name].id
  type        = "environment"
}

resource "azuredevops_pipeline_authorization" "service_connection" {
  for_each = local.pipelines

  project_id  = data.azuredevops_project.project.id
  pipeline_id = azuredevops_build_definition.terraform[each.key].id
  resource_id = azuredevops_serviceendpoint_azurerm.terraform.id
  type        = "endpoint"
}

// Optional set of Terraform files in the repository - shame there is no equivalent of template_dir

resource "azuredevops_git_repository_file" "terraform" {
  for_each = local.files

  repository_id       = data.azuredevops_git_repository.repo.id
  file                = each.key
  branch              = "refs/heads/main"
  commit_message      = "Initial commit"
  overwrite_on_create = false

  content = templatefile("${path.module}/files/${each.key}tpl", local.file_template_vars)
}
