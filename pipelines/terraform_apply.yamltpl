trigger:
- none

parameters:
  - name: terraform_action
    displayName: Terraform Apply - choose action
    type: string
    default: 'apply'
    values:
      - 'apply'
      - 'destroy'

variables:
  - name: workingDirectory
    value: "."
  - name: serviceConnection
    value: "${service_connection_name}"

stages:
- stage: validate
  displayName: validate
  jobs:
    - job:
      displayName: terraform validate
      pool:
        ${agent_pool_configuration}
      steps:
      - task: TerraformInstaller@1
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'
      - pwsh: terraform fmt -check
        displayName: Terraform Format Check
        workingDirectory: $(workingDirectory)
      - pwsh: terraform init -backend=false
        displayName: Terraform Init
        workingDirectory: $(workingDirectory)
      - pwsh: terraform validate
        displayName: Terraform Validate
        workingDirectory: $(workingDirectory)
- stage: plan
  $${{ if eq(parameters.terraform_action, 'destroy') }}:
    displayName: 'plan -destroy'
  $${{ else }}:
    displayName: 'plan'
  dependsOn: validate
  variables:
    - group: ${variable_group_name}
  jobs:
    - deployment: plan
      displayName: terraform plan
      pool:
        ${agent_pool_configuration}
      environment: ${environment_name}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@1
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: terraform init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(workingDirectory)'
                backendServiceArm: '$(serviceConnection)'
                backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
                backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
                backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
                backendAzureRmKey: 'terraform.tfstate'
                backendAzureRmUseEnvironmentVariablesForAuthentication: true
                backendAzureRmUseEntraIdForAuthentication: true
              env:
                ARM_USE_AZUREAD: true
            - task: TerraformTaskV4@4
              displayName: terraform plan
              inputs:
                provider: 'azurerm'
                environmentServiceNameAzureRM: '$(serviceConnection)'
                command: 'plan'
                workingDirectory: '$(workingDirectory)'
                $${{ if eq(parameters.terraform_action, 'destroy') }}:
                  commandOptions: '-destroy'
                $${{ else }}:
                  commandOptions: ''
              env:
                ARM_USE_AZUREAD: true
- stage: apply
  displayName: $${{ parameters.terraform_action }}
  dependsOn: plan
  variables:
    - group: ${variable_group_name}
  jobs:
    - deployment: apply
      displayName: terraform $${{ parameters.terraform_action }}
      pool:
        ${agent_pool_configuration}
      environment: ${environment_name}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform module
            - task: TerraformInstaller@1
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: terraform init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(workingDirectory)'
                backendServiceArm: '$(serviceConnection)'
                backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
                backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
                backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
                backendAzureRmKey: 'terraform.tfstate'
                backendAzureRmUseEnvironmentVariablesForAuthentication: true
                backendAzureRmUseEntraIdForAuthentication: true
              env:
                ARM_USE_AZUREAD: true
            - task: TerraformTaskV4@4
              displayName: terraform $${{ parameters.terraform_action }}
              inputs:
                provider: 'azurerm'
                environmentServiceNameAzureRM: '$(serviceConnection)'
                command: 'apply'
                workingDirectory: '$(workingDirectory)'
                $${{ if eq(parameters.terraform_action, 'destroy') }}:
                  commandOptions:  '-auto-approve -destroy'
                $${{ else }}:
                  commandOptions:  '-auto-approve'
              env:
                ARM_USE_AZUREAD: true